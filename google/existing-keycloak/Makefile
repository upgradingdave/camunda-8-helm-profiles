# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

project ?= camunda-researchanddevelopment
region ?= us-east1-b # see: https://cloud.withgoogle.com/region-picker/
clusterName ?= dave-camunda-01
# Azure provides temporary dns names such as:  MY_DOMAIN_NAME.region.cloudapp.azure.com
# However GCP does not. DNS names will be configured using https://nip.io
# dnsLabel ?= MY_DOMAIN_NAME
machineType ?= n1-standard-16
minSize ?= 1
maxSize ?= 6
certEmail ?= david.paroulek@camunda.com

# ------------------------------------
# The following variables should not be changed except for advanced use cases

root ?= $(shell pwd)/../..

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-ext-keycloak.yaml

.PHONY: all
all: cert-manager letsencrypt-prod ingress-nginx-tls install-camunda-keycloak-secret camunda annotate-ingress-tls external-urls

# 0 kube from cluster.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-gke metrics

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# TODO: both google and aws use this. we can combine this into an include possibly?
# 3 create nginx ingress controller with dns and tls
.PHONY: ingress-nginx-tls
ingress-nginx-tls:
	helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
	helm repo update ingress-nginx
	helm search repo ingress-nginx
	helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --wait \
	--set controller.service.annotations."nginx\.ingress.kubernetes.io/ssl-redirect"="true" \
	--set controller.service.annotations."cert-manager.io/cluster-issuer"="letsencrypt"

# 4 create camunda-values-nginx.yaml with external ip from ingress controller's Loadbalancer

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx

# 7 Show external URLs
.PHONY: external-urls
external-urls: ingress-ip-from-service
	@echo https://$(IP).nip.io/auth
	@echo https://$(IP).nip.io/identity
	@echo https://$(IP).nip.io/operate
	@echo https://$(IP).nip.io/tasklist
	@echo https://$(IP).nip.io/optimize
	@echo $(IP).nip.io:443

# Install existing Keycloak secret
.PHONY: install-camunda-keycloak-secret
install-camunda-keycloak-secret:
	-kubectl create namespace $(namespace)
	-kubectl apply -f $(root)/keycloak/camunda-platform/charts/identity/charts/keycloak/templates/secrets.yaml -n $(namespace)

# Getting url for grafana is vendor specific
.PHONY: url-grafana
url-grafana:
	@echo "http://`kubectl get svc metrics-grafana-loadbalancer -n default -o 'custom-columns=ip:status.loadBalancer.ingress[0].ip' | tail -n 1`/d/I4lo7_EZk/zeebe?var-namespace=$(namespace)"

.PHONY: clean-kube
clean-kube: clean-metrics clean-kube-gke

.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(root)/google/ingress/nginx/tls/camunda-values-nginx-ip.yaml

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/google/include/kubernetes-gke.mk
include $(root)/metrics/metrics.mk
